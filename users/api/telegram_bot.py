from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import httpx


class TelegramBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.backend_url = "http://localhost:8000"
        self._setup_handlers()

    def _setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("link", self.handle_link))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_other_text)
        )

    async def start(self, update: Update, context):
        chat_id = update.effective_chat.id
        await update.message.reply_text(
            f"üÜî –í–∞—à Chat ID: {chat_id}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –ø–æ–ª—É—á–µ–Ω–Ω—ã–π_–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
        )

    async def handle_link(self, update: Update, context):
        chat_id = update.effective_chat.id
        try:
            temp_token = context.args[0]
            if temp_token:
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"{self.backend_url}/user/telegram/link",
                        json={"temp_token": temp_token, "chat_id": chat_id}
                    )
                    response.raise_for_status()
                    await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /link.")
        except IndexError:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /link (–Ω–∞–ø—Ä–∏–º–µ—Ä: /link –≤–∞—à_–∫–æ–¥).")
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 404:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥.")
            elif e.response.status_code == 400:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: " + e.response.json().get('detail', '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'))
            else:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏: {e}")
        except httpx.RequestError as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")

    async def send_message(self, chat_id: int, text: str):
        try:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=text
            )
        except Exception as e:
            print(f"[ERROR] Failed to send message to chat {chat_id}: {e}")

    async def handle_other_text(self, update: Update, context):
        await update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start –≤–∞—à_–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    async def run(self):
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()